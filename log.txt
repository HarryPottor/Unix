
======================================
				7
=====================================
程序的执行：
编译器 调用 连接器 设置启动例程为程序的起始地址，
启动例程 从内核中取得 命令行参数和环境变量值，为main函数的调用做好准备。

进程的正常终止：
1 从main返回
2 调用exit
3 调用_exit / _Exit;
4 最后一个线程 从 它的启动例程 返回
5 最后一个线程 调用 pthread_exit()

进程非正常终止:
1 调用abort
2 接收到信号
3 最后一个线程 对 取消请求做出相应

stdlib.h
void exit(int);清理，再进入内核
	(对于所有打开流调用flose 函数，将使输出缓冲中的所有数据都被冲洗)
void _Exit(int);立即进入内核
unistd.h
void _exit(int);立即进入内核

终止状态未定义：
1 上边的函数未带参数 例如 exit()
2 main调用无返回值得return。即 return;
3 main没有声明返回类型为整型
* 如果main返回类型为整型，且隐式返回，则终止状态为0
** 查看终止状态: echo $?


atexit(void (*func)(void))函数：
登记至少支持32个函数，这些函数由exit自动调用
这些函数 为 终止处理程序
exit 函数 首先调用各个 终止处理程序，然后在关闭所有打开流
终止处理程序 
	每登记一次，就会被调用一次，但调用时机是程序结束以后，调用顺序是登记的倒序

内核 使 程序执行 的唯一方法是调用一个 exec函数。
进程自愿终止的唯一方法是 显式或隐式的调用 _exit, _Exit
	非自愿的方法 由信号使其终止。


程序除了有 参数表，还有一个 环境表。
环境表与参数表类似，指向字符串的指针数组，最后一项为NULL
extern char ** environ

程序分段：
----------------------------------
命令行参数和环境变量
栈
↓

↑
堆
未初始化的数据
初始化的数据
正文
----------------------------------
* 其中存放在磁盘程序文件中的段只有 正文段和初始化数据段
* size 查看程序的各段长度 例：size /bin/sh
cc -static hello.c 不使用动态库的编译

stdlib.h
void * malloc(size_t size) 不进行初始化
void * calloc(size_t objsz, size_t size) 初始化为0
void * realloc(void * ptr, size_t newsize) 新增区域的初始化值不确定


==============================================8=========================================
进程ID 0 调度进程
进程ID 1 init进程
进程ID 2 页守护进程

unistd.h
pid_t getpid();
pid_t getppid();
pid_t getuid(); 实际用户ID
pid_t geteuid(); 有效用户ID
pid_t getgid();	实际组ID
pid_t getegid(); 有效组ID

pid_t fork(void);
对父进程 返回 子进程ID：因为一个进程的子进程可以有很多，并且没有一个函数
	使一个进程可以获得其所有子进程的进程ID
对子进程 返回 0 ：一个进程只会有一个父进程，所以子进程总可以调用getppid
以获得其父进程的进程ID

*** fork后，子进程是父进程的副本，子进程获得父进程数据 数据空间，堆，栈 的副本
	这是子进程所拥有的副本，父子并不共享。只共享正文段。
**** 一般fork后经常跟随exec，所以子进程不一定需要父进程数据的副本，所以才用写时复制
	技术，这些区域由父子共享，内核设为只读权限；当试图修改时内核为修改区域的内存制作
	一个副本，通常是虚拟存储系统中的一页。

strlen 与 sizeof
对一个给定的字符串 char buf="abcdef";
strlen(buf) 进行了一次函数调用
sizeof(buf) 因为缓冲区已用已知字符串进行初始化，其长度是固定的，所以sizeof是在编译时
	计算缓冲区长度。

*** 当 标准输出 连到 终端设备，则它是行缓冲的，遇到\n会清空缓冲区；
	如果重定向到文件 则是全缓冲。进行fork的时候，缓冲区也会被拷贝过来...

vfork()
** 并不将父进程的地址空间完全复制到子进程中，子进程在调用exec或exit之前，它在父进程的空间中运行，
	如果子进程修改了数据，或者没有调用exit 则结果未知。
	保证子进程先运行，调用exec或exit之后父进程才激活。
**	子进程修改的数据，其实是父进程的。
*** exit与_exit
	_exit 不执行标准I/O缓冲区的冲洗操作
	exit 则可能会执行两方面内容：冲洗I/O流，关闭标准I/O流,清空相关缓冲区。
*** 所以 如果exit执行了两方面内容，那当时存在缓冲区的数据是不存在的。

exit() 进程终止
不管进程如何终止，都会执行内核中的同一段代码，为进程关闭所有打开描述符，
	释放它所使用的存储器等
对于exit(), _exit(), _Exit() 将退出状态作为参数传递给函数。
对于异常终止，内核产生一个指示其异常终止原因的终止状态。

退出状态和终止状态：
如果在最后调用_exit()，内核将退出状态转换成中止状态；
如果子进程正常终止，则父进程可以获得子进程的退出状态。

如果父进程先退出，子进程的父进程变为init进程的；
僵死进程：一个已经终止，但是其父进程尚未对其进程善后处理。ps为Z
除非父进程 等待 取得子进程的终止状态，不然这些子进程终止后会变为僵死进程。

init进程的子进程(可能是自己产生的，可能是收养的)结束后会调用一个wait
函数获取其终止状态。因此 init的子进程不会是僵尸进程。

当进程终止时， 内核  向其  父进程  发送 SIGCHILD 信号。

pid_t wait(int *status);
pid_t waitpid(pid_t pid, int *status, int options);
调用wait，waitpid时：
1 若当前进程有子进程则阻塞，
2 如果 一个子进程已终止，正等待 当前进程 获取它的终止状态，
	当前进程 取得其终止状态后立即返回。
3 如果 当前进程 没有任何子进程，则立即出错返回。
4 waitpid 如果指定的进程或进程组不存在，或者参数pid指定的进程
	不是调用进程的子进程，则出错
参数：
1 pid
pid == -1 等待任意进程
pid > 0 等待进程ID 等于 pid 的进程
pid == 0 等待 组ID == 调用进程组ID 的任意进程
pid < -1 等待 组ID == pid绝对值 的任意子进程
2 status
WIF EXITED 正常终止的子进程为真， 
			W EXIT STATUS 获取exit,_exit的参数
WIF SIGNALED 异常终止子进程为真
			WT ERM SIG 获取终止信号的编号
			W CORE DUMP 若产生了终止进程的core文件，则为真
WIF STOPPED 暂停子进程为真
			W STOP SIG 获取使进程暂停的信号编号
WIF CONTINUED 暂停子进程 继续执行 则为真

3 options
WNOWAIT 它使 系统将终止状态已由waitpid返回的进程 保持在 等待状态，
		这样它可被再次等待。
WCONTINUED 若实现支持作业控制，那么由pid指定的任意子进程在停止后已经继续，
		但其状态尚未报告，则返回其状态。
WNOHANG	若由pid指定的子进程并不是立即可用的，则waitpid不阻塞，此时返回值为0
WUNTRACED 若某实现支持作业控制，而由pid指定的任一子进程已处于停止状态，
		并且其状态自停止以来还未汇报过，则返回其状态。

*(SUS) int waitid(idtype_t idtype, id_t id, siginfo_t *infop, int options);
idtype : P_PID P_PGID P_ALL
options:  	WCONTINUED  等一进程，以前被停止，此后又已继续，但未报告状态(*)
			WEXITED 	等 已退出的进程(*)
			WNOHANG 	如果没有可用的子进程退出状态，立即返回而非阻塞
			WNOWAIT		不破坏子进程退出状态，该退出状态可由后续wait waitid waitpid继续取得
			WSTOPPED	等一进程，它已停止，但状态尚未报告(*)
			(*)三个之一必须在options中指定
infop:	siginfo 结构指针，信号数据

wait3(int *status, int options, struct rusage* rusage);
wait4(pid_t pid, int *status, int options, struct rusage* rusage);
rusage 资源统计：用户cpu时间总量，系统cpu时间总量，缺页次数，接收到信号次数等

条件竞争：
如果一个进程要等待父进程终止，则可以使用循环:
while(getppid() != 1)
{
	sleep(1);
}
称为 轮询，浪费了CPU时间

函数exec
fork后，子进程往往要调用一种exec执行另一个程序。该进程执行的程序完全替换为
新程序，而新程序则从main函数开始，但并没有创建新进程。 
int execl(const char* pathname, const char *arg0, ...[(char*)0])
int execle(const char* pathname, const char *arg0, ...[(char*)0, char*const envp[]])
int execlp(const char* filename, const char *arg0, ...[(char*)0])

int execv(const char* pathname, char * const argv[]);
int execve(const char* pathname, char * const argv[], char* const envp[]);
int execvp(const char* filename, char * const argv[]);

int fexecve(int fd, char* const argv[], char *const envp[]);

*如果filename中包含/ 则变为路径名
*否则就按PATH环境变量，在它所指定的各目录中搜寻可执行文件。
使用execlp execvp 在路径中找到了一个可执行文件，但是该文件不是由连接编辑器产生的
机器可执行文件，则认为该文件是个shell

进程中每个打开描述符 都有一个执行时关闭标志，
	若设置了此标志，则在执行exec时关闭该描述符
	否则，该描述符仍然打开。
	除非特地用fcntl设置了该执行时关闭标志，否则默认exec后是打开的

POSIX.1 明确指出 exec 时关闭打开的目录流


execlp		execl		execle
   ↓		  ↓			  ↓
execvp   →  execv  →  	execve(系统调用)
						  ↑
						fexecve

文件->合并参数 ->使用PATH ->使用环境->系统调用
fexecve -> 使用/proc 把文件描述符参数转换 为路径 ->系统调用

//修改实际用户ID 和 有效用户ID
//修改实际组ID 和 有效组ID
#include <unistd.h>
int setuid(uid_t uid);
int setgid(uid_t gid);
	--Success: 0;
	--Faile: -1;
1 进程具有超级用户特权：
	实际用户ID，有效用户ID，保存的设置用户ID → uid
2 进程没有超级用户特权
	如果uid == 实际用户ID或者保存的设置用户ID，
		则setuid只将 有效用户 → uid，不更改实际用户ID和保存的设置用户ID
3 都不是，为errno设为EPERM，并返回-1
4 _POSIX_SAVED_IDS 为 真，则 关于  保存的设置用户ID 才起作用